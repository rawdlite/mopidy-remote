from __future__ import unicode_literals
import ast
import os
import random
import tornado.web

from mopidy import ext
import logging

logger = logging.getLogger(__name__)

class RandomplayHandler(tornado.web.RequestHandler):
    def initialize(self, core):
        self.core = core
        logger.debug("randomplay initialized")

    def get(self):
        print self.get_argument('query')
        self.write(
            'Hello, world! This is Mopidy %s' %
            self.core.get_version().get())

    def post(self):
        data = self.request.body
        query = None
        uris = None
        payload = ast.literal_eval(data.decode("utf-8"))
        logger.debug("Payload")
        logger.info(payload)
        if 'query' in payload:
            query = payload['query']
        if 'uris' in payload:
            uris = payload['uris']
        logger.info("Query %s, uris = %s" % (query,uris))
        logger.debug("Query %s, uris = %s" % (type(query).__name__,type(uris).__name__))
        res = self.core.library.search(query, uris=uris).get()
        logger.debug("Res size %s and type %s" % (len(res),type(res).__name__))
        tracks = []
        albums = []
        for resultset in res:
            logger.debug("Found %s tracks uri %s" % (len(resultset.tracks),resultset.uri))
            tracks.extend(resultset.tracks)
            albums.extend(resultset.albums)
        if tracks:
            i = random.randint(0, len(tracks) - 1)
            track = tracks[i]
	    self.core.tracklist.add([track])
            logger.debug(track)
        if albums:
            i = random.randint(0, len(albums) - 1)
            album = albums[i]
	    #self.core.tracklist.add(uri = album.uri)
        logger.debug("Found %s albums %s" % (len(albums),type(albums).__name__))
        self.write("album len %s " % len(albums))

def factory(config, core):
    logger.debug("randomplay_factory initialized")
    return [
        ('/', RandomplayHandler, {'core': core})
    ]

